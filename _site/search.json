[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/A1/index.html",
    "href": "posts/A1/index.html",
    "title": "A1 Submission - Version 1",
    "section": "",
    "text": "In the generative garden created with p5.js, natural elements like trees, butterflies, and stones are brought to life using mathematical principles, while the flowers undergo a withering process. This process simulates the gradual loss of vitality over time, reflecting the natural life cycle of flowers.\nUsing variables x, y, and z, the placement and movement of these elements are controlled, while mathematical techniques like trigonometry, fractals, and parametric equations ensure an organic, dynamic structure. The following sections explore how these techniques are applied to create and wither the flowers in the garden.\nCODE\n\n&lt;&lt;/p&gt;\n\n\nEXPLANATION\nIn the generative garden created with p5.js, the variables x, y, and z play crucial roles in determining the placement, movement, and organic structure of different elements such as trees, flowers, butterflies, clouds, leaves, and stones. Since p5.js primarily works in a 2D coordinate system, x and y directly control horizontal and vertical positions, while z is used indirectly for randomness or depth simulation. Various mathematical techniques, including trigonometry, fractals, and parametric equations, help generate these natural patterns efficiently and aesthetically.\nFor the tree branching structure, recursion and trigonometry are used to simulate realistic growth. Each branch extends using the equations x’ = x + L cos(θ) and y’ = y - L sin(θ), where L represents branch length, and θ is the branch angle. The cosine function determines how much the branch extends horizontally, while sine dictates the vertical shift. This ensures that the tree maintains an organic, natural spread instead of growing in a rigid pattern. To prevent unnatural growth, a recursive scaling factor is applied: L_n = 0.75 × L_{n-1}. This means that each new branch is 75% of its parent’s length, leading to a progressively shrinking structure that mimics real trees. Additionally, since p5.js uses (0,0) as the top-left corner, subtracting L sin(θ) ensures the tree grows upwards, as decreasing y moves objects upwards in p5.js.\nFlowers in the garden follow parametric equations to create symmetrically arranged petals. Each petal’s position follows x = r cos(θ) and y = r sin(θ), where r controls how far the petal extends from the centre and θ determines its angular position. To ensure that the petals do not overlap and follow natural plant growth patterns, the Golden Angle (137.5°) is used, following the equation θ = i × 137.5°. This prevents clustering and ensures that petals are evenly distributed around the centre, similar to how sunflower seeds are arranged in nature. The parametric approach also allows for precise control over petal shapes, ensuring they remain true to the mathematical model of natural flowers.\nButterflies exhibit smooth, periodic wing flapping, which is modelled using sine wave oscillation: flapAngle = sin(t) × 10°. The sine function creates a natural wave-like movement, ensuring the wings move fluidly up and down. The parametric equations x = r cos(a) and y = r sin(a) are used to define the wings’ structure, ensuring perfect symmetry. Since sin(t) oscillates continuously, the wings appear to flutter naturally rather than moving in a rigid or artificial manner.\nNatural elements like clouds and leaves should not appear perfectly arranged or randomly scattered. Instead, their placement follows fractal mathematics to ensure organic clustering. For clouds, Julia set fractals are used, with placement determined by x = -300 + 200 × Re(z) and y = -200 + 200 × Im(z). Here, Re(z) and Im(z) represent the real and imaginary components of a complex number, introducing flowing randomness to the cloud distribution. This prevents an overly structured or artificial appearance. Similarly, Mandelbrot fractals are used for leaf distribution, following x = Re(z) × leafSize and y = Im(z) × leafSize, ensuring that leaves form clusters rather than appearing uniformly spaced.\nTo make the stone path look natural, we avoid rigid, straight-line placement. Instead, stones follow an elliptical trajectory given by x = r cos(θ) + random(-40, 40) and y = r sin(θ) + random(-40, 40). The cosine and sine functions ensure that the stones align along a curved path, while random(-40, 40) introduces slight displacement, making the arrangement appear more organic. This method ensures that the path winds naturally, rather than appearing too structured or mechanical.\nUsers can interact with the generative garden to enhance immersion. Zooming in and out allows close inspection of fractal-generated clouds, petal arrangements, and tree structures. Mouse movements subtly affect object opacity and movement, making the scene feel dynamic and responsive.\nBy combining trigonometry, fractals, parametric equations, and recursion, the generative garden achieves a balanced, organic look, making it a visually engaging, interactive experience in p5.js.\nNOTE\nThe rendering for this generative garden takes quite a long time due to the complexity of the elements and interactions. As a solution, we have created Version 2, which retains all elements except the withering process, and features different flower colours for improved performance.\nTo enhance the generative garden and optimise its performance, we utilised AI to refine our code structure and seamlessly integrate various mathematical elements. This ensured a more cohesive and efficient design while preserving the intricate natural complexity of the scene."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mathematicaly",
    "section": "",
    "text": "A1 Submission - Version 1\n\n\n\n\n\n\nmath\n\n\ncode\n\n\nart\n\n\n\n\n\n\n\n\n\nMar 31, 2025\n\n\nAadil Tanwar, Harshita K, Bunyan Usman, Manaswi Sharma, Sara Saju\n\n\n\n\n\n\n\n\n\n\n\n\nA1 Submission - Version 2\n\n\n\n\n\n\nmath\n\n\ncode\n\n\nart\n\n\n\n\n\n\n\n\n\nMar 31, 2025\n\n\nAadil Tanwar, Harshita K, Bunyan Usman, Manaswi , Sara Saju\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 28, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/A1-V2/Index.html",
    "href": "posts/A1-V2/Index.html",
    "title": "A1 Submission - Version 2",
    "section": "",
    "text": "This project is a generative 3D garden built using p5.js with the WEBGL, incorporating mathematical concepts such as parametric equations, fractals, and trigonometry to create realistic and interactive elements. The scene features trees, flowers, bushes, butterflies, clouds, and a winding stone path, all positioned dynamically using mathematical functions.\nThe garden uses trigonometric functions (sine and cosine) to create smooth curves, animate objects, and position elements naturally. Fractal recursion is applied in tree generation, while parametric equations help structure flowers and butterfly wings. User interactions, such as rotating and zooming, enhance engagement by providing an explorable 3D space.\nCODE\n\n&lt;&lt;/p&gt;\n\n\nEXPLANATION\nIn the generative garden created with p5.js, the variables x, y, and z play crucial roles in determining the placement, movement, and organic structure of different elements such as trees, flowers, butterflies, clouds, leaves, and stones. Since p5.js primarily works in a 2D coordinate system, x and y directly control horizontal and vertical positions, while z is used indirectly for randomness or depth simulation. Various mathematical formulas, including trigonometry, fractals, and parametric equations, help generate these natural patterns in an efficient and visually appealing manner.\nFor the tree branching structure, recursion and trigonometry are used to simulate realistic growth. Each branch extends using the equations x = x + L cos(θ) and y = y - L sin(θ), where L represents branch length and θ is the branch angle. The cosine function controls the horizontal extension, while the sine function determines the vertical placement. A recursive scaling factor (L_n = 0.75 L_{n-1}) ensures branches shrink naturally as they grow further, preventing an unnatural linear structure. The subtraction in y - L sin(θ) is necessary because, in p5.js, the (0,0) coordinate starts from the top-left, meaning decreasing y moves objects upward.\nFlowers in the generative garden are positioned using parametric equations to create a natural radial pattern. Each petal is placed according to x = r cos(θ) and y = r sin(θ), where r controls the petal’s distance from the center, and θ defines its rotation. The use of cos(θ) and sin(θ) ensures symmetry by distributing petals evenly around the center. Additionally, the Golden Angle (137.5°) is used for petal placement, following the formula θ = i × 137.5°, which prevents overlap and natural plant growth patterns. To ensure the flowers closely resemble the original parametric flower structure, care is taken to maintain accurate radial spacing and avoid dist\nThe butterfly wings exhibit natural motion using sine-based oscillation, modeled as flapAngle = sin(t) × 10°. This equation creates smooth up-and-down movement over time, making the wings appear lifelike. The wings’ shapes themselves are generated using x = r cos(a) and y = r sin(a), ensuring they maintain symmetry while flapping. The sine function is particularly useful here because it produces a smooth, periodic motion instead of abrupt or linear movements.\nClouds in the garden are positioned based on Julia set fractals, which introduce organic randomness while maintaining a flowing structure. Their locations follow x = -300 + 200 × Re(z) and y = -200 + 200 × Im(z), where Re(z) and Im(z) represent the real and imaginary components of a complex number. This approach helps generate naturally distributed cloud formations, preventing artificial-looking placements. Similarly, leaves use Mandelbrot fractals for clustering, following x = Re(z) × leafSize and y = Im(z) × leafSize, ensuring the distribution appears random yet structured, unlike simple uniform spacing.\nThe stone path in the scene follows an elliptical trajectory to simulate a natural winding pathway. Each stone’s position is determined by x = r cos(θ) + random(-40, 40) and y = r sin(θ) + random(-40, 40), where cos(θ) and sin(θ) ensure stones align along a curve while random(-40, 40) introduces natural displacement, making the placement look less artificial. Unlike rigid grid-based positioning, this approach creates a more organic and aesthetically pleasing arrangement.\nUsers can interact with the garden through mouse movements and zoom. Zooming in and out allows closer inspection of details like fractal-generated clouds and petal arrangements. Mouse interactions provide a more immersive experience, such as hovering over elements to create subtle changes in opacity or movement, making the garden feel dynamic and responsive.\nAcross all these elements, x controls left-right movement, y dictates up-down positioning, and z is used in fractals and randomness to create depth and natural irregularity. By utilizing trigonometry for circular placements, fractals for organic patterns, and parametric equations for controlled curves, the generative garden achieves a realistic and visually appealing balance.\nNOTE\nTo enhance the generative garden and optimise its performance, we utilised AI to refine our code structure and seamlessly integrate various elements. This ensured a more cohesive and efficient."
  },
  {
    "objectID": "SonicSigns.html",
    "href": "SonicSigns.html",
    "title": "Sonic Signs",
    "section": "",
    "text": "O mind, what are you thinking? Why do you waver or get agitated? You believe in little things (or small-minded concepts) even though sages like Sanaka and others have spoken of the truth… why do you still cling to the transient, O mind? Truly follow the devotee, and realise that the real source of strength is that divine energy. ~Dr. Balamuralikrishna Music transcends human psyche. Not everyone can sing, but everyone can feel emotions. The mark of a exceptional singer is to evocative the ubiquitous ‘Bhaav’ or emotion inside the heart. Bhartanatyam as a dance form is celebrated and revered throughout the world. It’s foundation is on discipline and structure wrapped with devotion as a act of surrendering tot he supreme deity. Art can never die, it lives on the heart of the patreons. In this project we delve into Neural Networks, CNNs and error propagation. Keeping the technicals asides we are transforming the notion of classical and technological by bridging the gap with cybernetics and creative coding. The project creates an elegant outcome at the intersection of Bhartanatyam and contemporary machine learning technologies. The creative outcome of our inquiry is an interactive mudra detector that detects mudras in real time and plays a musical note linked to the same. Bharatanatyam is full of symbolism, with every mudra holding multiple layers of narrative, spiritual, and emotional meaning. This project aims to document and reinterpret these gestures in the framework of artificial intelligence, not to supplant the meaning but to create new pathways of interactive storytelling. By providing technology with the ability to hear and reply to these ancient movements, the project presents a dynamic archive and performing space that is both informative and creative. By uniting code and culture, and gesture and generative response, this project transcends being a tool, it becomes a extant interface between the past and present. It is an offering from algorithms’ precision to Bharatanatyam’s flowing grace, from silicon’s silence to the timbre of sound.\nWhat is left is a reminder that technology, applied with discretion, can be not a disruptor of tradition but its humble interpreter. This mudra detector is a little more than technological design, but an homage, a rhythmically encoded paean to the expressive intelligence of the human body, the heart of music, and the timeless beauty of classical art.\n\n\n\n\n\n\n\n\n\nThe main objective of this project is to develop a gesture recognition system that is able to:\n-Recognize major Bharatanatyam mudras via a webcam with the help of AI.\n-React to every mudra with corresponding visual and audio components that mirror or enhance its meaning or emotional content.\n-Develop a performative digital installation where movement from tradition meets computational interpretation.\n\n\n\n\n-Data Collection: A labeled dataset of Bharatanatyam mudra samples is generated with the webcam and the handpose model of ml5.js. A mudra is captured through each of the 21 keypoints of the hand.\n-Model Training: A neural network is trained custom with ml5.neuralNetwork to classify the gesture according to these keypoints.\n-Real-Time Interaction: The trained model is incorporated into a p5.js sketch that does real-time classification off webcam input.\nEmbodied Feedback System: -A recognized mudra invokes: -A distinctive sound (conventional instruments such as veena, flute, mridangam) -A generative image (e.g., mandala designs, color waves, Sanskrit words) -Optionally, physical lights with Arduino and RGB LEDs\n\nTools and Techniques p5.js, ml5.js, handpose model Custom sound samples and visual animations GitHub Pages or Glitch for online hosting\n\nExpected Outcomes: -A working web-based demo that recognizes and reacts to 4–6 distinct Bharatanatyam mudras. -A performative presentation showcasing the system in use — where mudras trigger audio-visual feedback. -An online archive/interface that introduces users to mudras, their meanings, and their recognition through AI."
  },
  {
    "objectID": "SonicSigns.html#objective",
    "href": "SonicSigns.html#objective",
    "title": "Sonic Signs",
    "section": "",
    "text": "The main objective of this project is to develop a gesture recognition system that is able to:\n-Recognize major Bharatanatyam mudras via a webcam with the help of AI.\n-React to every mudra with corresponding visual and audio components that mirror or enhance its meaning or emotional content.\n-Develop a performative digital installation where movement from tradition meets computational interpretation."
  },
  {
    "objectID": "SonicSigns.html#methodology",
    "href": "SonicSigns.html#methodology",
    "title": "Sonic Signs",
    "section": "",
    "text": "-Data Collection: A labeled dataset of Bharatanatyam mudra samples is generated with the webcam and the handpose model of ml5.js. A mudra is captured through each of the 21 keypoints of the hand.\n-Model Training: A neural network is trained custom with ml5.neuralNetwork to classify the gesture according to these keypoints.\n-Real-Time Interaction: The trained model is incorporated into a p5.js sketch that does real-time classification off webcam input.\nEmbodied Feedback System: -A recognized mudra invokes: -A distinctive sound (conventional instruments such as veena, flute, mridangam) -A generative image (e.g., mandala designs, color waves, Sanskrit words) -Optionally, physical lights with Arduino and RGB LEDs\n\nTools and Techniques p5.js, ml5.js, handpose model Custom sound samples and visual animations GitHub Pages or Glitch for online hosting\n\nExpected Outcomes: -A working web-based demo that recognizes and reacts to 4–6 distinct Bharatanatyam mudras. -A performative presentation showcasing the system in use — where mudras trigger audio-visual feedback. -An online archive/interface that introduces users to mudras, their meanings, and their recognition through AI."
  }
]